AWSTemplateFormatVersion: 2010-09-09
Description: Pipeline for {{ cookiecutter.project_name }}.

Parameters:
  ArtifactBucketName:
    Type: String
    Description: Name of the S3 bucket containing the deployable artifacts.
    Default: {{ cookiecutter.artifact_s3_bucket }}
  GitHubOAuthToken:
    Type: String
    NoEcho: true
    MinLength: 40
    MaxLength: 40
    AllowedPattern: '[a-z0-9]*'
  GitHubOwner:
    Type: String
    Default: {{ cookiecutter.github_owner }}
  GitHubRepo:
    Type: String
    Default: {{ cookiecutter.github_repo }}
  GitHubBranch:
    Type: String
    Default: {{ cookiecutter.github_branch }}

Resources:
  EcrImageRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      RepositoryName: {{ cookiecutter.project_slug }}-repo
      LifecyclePolicy:
        LifecyclePolicyText: >
          {
            "rules": [
              {
                "rulePriority": 10,
                "description": "Only retain last 10 images with tagprefix sha",
                "selection": {
                  "tagStatus": "tagged",
                  "countType": "imageCountMoreThan",
                  "tagPrefixList": [
                    "sha"
                  ],
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              },
              {
                "rulePriority": 15,
                "description": "Only retain last 2 images with tagprefix latest-test",
                "selection": {
                  "tagStatus": "tagged",
                  "countType": "imageCountMoreThan",
                  "tagPrefixList": [
                    "t_sha"
                  ],
                  "countNumber": 2
                },
                "action": {
                  "type": "expire"
                }
              },
              {
                "rulePriority": 20,
                "description": "Only retain last untagged images",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "imageCountMoreThan",
                  "countNumber": 1
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
      Path: /
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${ArtifactBucketName}/*
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrImageRepository}

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: {{ cookiecutter.project_slug }}-codebuild-cfn
      Description: Build project for {{ cookiecutter.project_slug }}-codebuild-cfn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrImageRepository}
      Cache:
        Type: S3
        Location: !Sub ${ArtifactBucketName}/codebuild-cache
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn

  # CodePipeline IAM Role
  CodePipelineServicenRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
      Path: /
      Policies:
        - PolicyName: DefaultCodePipelinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucketName}
                  - !Sub arn:aws:s3:::${ArtifactBucketName}/*
                  # - arn:aws:s3:::codepipeline*
                  # - arn:aws:s3:::codepipeline*/*
                  # - arn:aws:s3:::elasticbeanstalk*
                  # - arn:aws:s3:::elasticbeanstalk*/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  # - codedeploy:CreateDeployment
                  # - codedeploy:GetApplicationRevision
                  # - codedeploy:GetDeployment
                  # - codedeploy:GetDeploymentConfig
                  # - codedeploy:RegisterApplicationRevision
                  - ecs:DescribeServices
                  - ecs:DescribeTaskDefinition
                  - ecs:DescribeTasks
                  - ecs:ListTasks
                  - ecs:RegisterTaskDefinition
                  - ecs:UpdateService
                  - sns:Publish
        - PolicyName: CloudFormationAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - cloudformation:GetTemplate
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackResources
                  - cloudformation:DescribeStackEvents
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:ValidateTemplate
                  - iam:PassRole

  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action:
            - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
              - cloudformation.amazonaws.com
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

{% if cookiecutter.deploy_acc == "True" or cookiecutter.deploy_prod == "True" %}
  # Defintiion of the prouction/acceptance CodePipeline.
  DeliveryPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
          Location: !Ref ArtifactBucketName
          Type: S3
      Name: {{ cookiecutter.project_slug }}-delivery-pipeline-cfn
      RoleArn: !GetAtt CodePipelineServicenRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              Configuration:
                  Owner: !Ref GitHubOwner
                  Repo: !Ref GitHubRepo
                  Branch: !Ref GitHubBranch
                  PollForSourceChanges: False
                  OAuthToken: !Ref GitHubOAuthToken
              OutputArtifacts:
                - Name: SourceZip
              # RunOrder: 1
        - Name: Build
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceZip
              OutputArtifacts:
                - Name: BuildArtifactAsZip
              # RunOrder: 1
        {%- if cookiecutter.deploy_acc == "True" %}
        - Name: Acceptance
          Actions:
            - Name: DeployAcceptance
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: !GetAtt CloudFormationExecutionRole.Arn
                StackName: {{ cookiecutter.project_slug }}-acc-stack-cfn
                TemplatePath: SourceZip::cfn-template.yaml
                TemplateConfiguration: SourceZip::config/acc-stack-config.json
              InputArtifacts:
                - Name: SourceZip
              RunOrder: 1
            {%- if cookiecutter.enable_pipeline_approvals == "True" %}
            - Name: ApproveDeployToProd
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: "1"
                Provider: Manual
              Configuration:
                {%- if cookiecutter.approvals_notification_topic != "" %}
                NotificationArn: {{ cookiecutter.approvals_notification_topic }}
                {%- endif %}
                CustomData: {{ cookiecutter.project_slug }}
              RunOrder: 2
            {%- endif %}
        {%- endif %}
        {%- if cookiecutter.deploy_prod == "true" %}
        - Name: Production
          Actions:
            - Name: DeployProduction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: !GetAtt CloudFormationExecutionRole.Arn
                StackName: {{ cookiecutter.project_slug }}-prod-stack-cfn
                TemplatePath: SourceZip::cfn-template.yaml
                TemplateConfiguration: SourceZip::config/prod-stack-config.json
              InputArtifacts:
                - Name: SourceZip
              RunOrder: 1
        {%- endif %}

  GitHubPipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubOAuthToken
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref DeliveryPipeline
      TargetAction: GitHubSourceAction
      TargetPipelineVersion: !GetAtt DeliveryPipeline.Version
      RegisterWithThirdParty: True
{%- endif %}

Outputs:
  EcrRepository:
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrImageRepository}
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'EcrRepository' ] ]
